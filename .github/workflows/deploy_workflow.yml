name: Deployment Workflow
on:
  workflow_dispatch:

  push:
    branches: [main]

jobs:
  job_one:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
    - name: Configure SSH
      run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
      env:
        SSH_HOST: ${{ secrets.SERVER_HOST }}
        SSH_USER: ${{ secrets.SERVER_USER }}
        SSH_KEY: ${{ secrets.SSH_SECRET }}  
    - name: Configure Environment
      run: |
          mkdir -p ~/.scripts/
          echo "export DATABASE_USERNAME=$DATABASE_USERNAME" >> ~/.scripts/startup.sh
          echo "export DATABASE_PASSWORD=$DATABASE_PASSWORD" >> ~/.scripts/startup.sh
          echo "export DATABASE_JDBC_URL=$DATABASE_JDBC_URL" >> ~/.scripts/startup.sh
          cat ~/.scripts/startup.sh
          chmod +x ~/.scripts/startup.sh
      env:
        SSH_HOST: ${{ secrets.SERVER_HOST }}
        SSH_USER: ${{ secrets.SERVER_USER }}
        SSH_KEY: ${{ secrets.SSH_SECRET }}  
        DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
        DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
        DATABASE_JDBC_URL: ${{secrets.DATABASE_JDBC_URL}}

    - name: Apply Environment
      run: |
        ssh staging 'bash -s' < ~/.scripts/startup.sh
    
    - name: Deploy
      run: |
        ssh staging 'cd ~/apps/esp32-access-control-api && ./deploy.sh'
